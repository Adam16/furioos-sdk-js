export = Player;
declare class Player {
    static get qualityValues(): {
        AUTO: number;
        LOW: number;
        MEDIUM: number;
        HIGH: number;
        ULTRA: number;
    };
    static get regions(): {
        EUW: number[];
        USW: number[];
        USE: number[];
        AUE: number[];
    };
    constructor(sharedLinkID: any, containerId: any, options: any);
    sdkDebug: import("./SDKDebug.js");
    loaded: boolean;
    debugAppMode: boolean;
    sharedLink: any;
    containerId: any;
    options: any;
    embed: HTMLIFrameElement;
    _createIframe(): HTMLIFrameElement;
    _displayErrorMessage(message: any): void;
    _onLoad(): void;
    get quality(): any;
    onLoad(onLoadCallback: any): void;
    _onLoadCallback: any;
    setDefaultLocation(location: any): void;
    location: any;
    start(location: any): void;
    stop(): void;
    maximize(): void;
    minimize(): void;
    setQuality(value: any): void;
    restartStream(): void;
    onSDKMessage(onSDKMessageCallback: any): void;
    _onSDKMessageCallback: any;
    onUserActive(onUserActiveCallback: any): void;
    _onUserActiveCallback: any;
    onUserInactive(onUserInactiveCallback: any): void;
    _onUserInactiveCallback: any;
    onAppInstallProgress(onAppInstallProgress: any): void;
    _onAppInstallProgress: any;
    onAppInstallSuccess(onAppInstallSuccess: any): void;
    _onAppInstallSuccess: any;
    onAppInstallFail(onAppInstallFail: any): void;
    _onAppInstallFail: any;
    onAppStart(onAppStart: any): void;
    _onAppStart: any;
    onStreamStart(onStreamStart: any): void;
    _onStreamStart: any;
    onSessionStopped(onSessionStoppedCallback: any): void;
    _onSessionStoppedCallback: any;
    onStats(callback: any): void;
    _onStatsCallback: any;
    sendSDKMessage(data: any): void;
    setUserActive(): void;
    setThumbnailUrl(thumbnailUrl: any): void;
    getServerAvailability(getServerAvailabilityCallback: any, getServerAvailabilityErrorCallback: any): void;
    _getServerAvailabilityCallback: any;
    _getServerAvailabilityErrorCallback: any;
    getServerMetadata(getServerMetadataCallback: any, getServerMetadataErrorCallback: any): void;
    _getServerMetadataCallback: any;
    _getServerMetadataErrorCallback: any;
}
